"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expand = expand;
exports.parse = parse;
exports.compile = compile;

var _immutable = require("immutable");

var _shiftReducer = require("shift-reducer");

var _shiftReducer2 = _interopRequireDefault(_shiftReducer);

var _parseReducer = require("./parse-reducer");

var _parseReducer2 = _interopRequireDefault(_parseReducer);

var _shiftCodegen = require("shift-codegen");

var _shiftCodegen2 = _interopRequireDefault(_shiftCodegen);

var _bindingMap = require("./binding-map.js");

var _bindingMap2 = _interopRequireDefault(_bindingMap);

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _modules = require("./modules");

var _babelStandalone = require("babel-standalone");

var _nodeModuleResolver = require("./node-module-resolver");

var _nodeModuleResolver2 = _interopRequireDefault(_nodeModuleResolver);

var _nodeModuleLoader = require("./node-module-loader");

var _nodeModuleLoader2 = _interopRequireDefault(_nodeModuleLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function expand(source) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  let bindings = new _bindingMap2.default();
  let modules = new _modules.Modules({
    bindings: bindings,
    cwd: options.cwd || process.cwd(),
    filename: options.filename,
    transform: options.transform || _babelStandalone.transform || function (c) {
      return { code: c };
    },
    moduleResolver: options.moduleResolver || _nodeModuleResolver2.default,
    moduleLoader: options.moduleLoader || _nodeModuleLoader2.default
  });
  let compiledMod = modules.compileEntrypoint(source, options.filename, options.enforcePragma);
  let nativeImports = compiledMod.importEntries.filter(imp => !modules.has(imp.moduleSpecifier.val()));
  return new _terms2.default("Module", {
    directives: (0, _immutable.List)(),
    items: nativeImports.concat(compiledMod.body).concat(compiledMod.exportEntries.interpose(new _terms2.default('EmptyStatement', {})))
  });
}

// not available in browser

function parse(source, options) {
  let includeImports = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

  return (0, _shiftReducer2.default)(new _parseReducer2.default({ phase: 0 }), expand(source, options).gen(includeImports));
}

function compile(source) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  let ast = parse(source, options, options.includeImports);
  let gen = (0, _shiftCodegen2.default)(ast, new _shiftCodegen.FormattedCodeGen());
  return options.transform && !options.noBabel ? options.transform(gen, {
    babelrc: true,
    filename: options.filename
  }) : { code: gen };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zd2VldC5qcyJdLCJuYW1lcyI6WyJleHBhbmQiLCJwYXJzZSIsImNvbXBpbGUiLCJzb3VyY2UiLCJvcHRpb25zIiwiYmluZGluZ3MiLCJtb2R1bGVzIiwiY3dkIiwicHJvY2VzcyIsImZpbGVuYW1lIiwidHJhbnNmb3JtIiwiYyIsImNvZGUiLCJtb2R1bGVSZXNvbHZlciIsIm1vZHVsZUxvYWRlciIsImNvbXBpbGVkTW9kIiwiY29tcGlsZUVudHJ5cG9pbnQiLCJlbmZvcmNlUHJhZ21hIiwibmF0aXZlSW1wb3J0cyIsImltcG9ydEVudHJpZXMiLCJmaWx0ZXIiLCJpbXAiLCJoYXMiLCJtb2R1bGVTcGVjaWZpZXIiLCJ2YWwiLCJkaXJlY3RpdmVzIiwiaXRlbXMiLCJjb25jYXQiLCJib2R5IiwiZXhwb3J0RW50cmllcyIsImludGVycG9zZSIsImluY2x1ZGVJbXBvcnRzIiwicGhhc2UiLCJnZW4iLCJhc3QiLCJub0JhYmVsIiwiYmFiZWxyYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE2QmdCQSxNLEdBQUFBLE07UUFvQkFDLEssR0FBQUEsSztRQUlBQyxPLEdBQUFBLE87O0FBcERoQjs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUVBOzs7O0FBQ0E7O0FBSUE7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBY08sU0FBU0YsTUFBVCxDQUFnQkcsTUFBaEIsRUFBaUU7QUFBQSxNQUFqQ0MsT0FBaUMsdUVBQVQsRUFBUzs7QUFDdEUsTUFBSUMsV0FBVywwQkFBZjtBQUNBLE1BQUlDLFVBQVUscUJBQVk7QUFDeEJELHNCQUR3QjtBQUV4QkUsU0FBS0gsUUFBUUcsR0FBUixJQUFlQyxRQUFRRCxHQUFSLEVBRkk7QUFHeEJFLGNBQVVMLFFBQVFLLFFBSE07QUFJeEJDLGVBQVdOLFFBQVFNLFNBQVIsa0NBQXVDLFVBQVNDLENBQVQsRUFBWTtBQUM1RCxhQUFPLEVBQUNDLE1BQU1ELENBQVAsRUFBUDtBQUNELEtBTnVCO0FBT3hCRSxvQkFBZ0JULFFBQVFTLGNBQVIsZ0NBUFE7QUFReEJDLGtCQUFjVixRQUFRVSxZQUFSO0FBUlUsR0FBWixDQUFkO0FBVUEsTUFBSUMsY0FBY1QsUUFBUVUsaUJBQVIsQ0FBMEJiLE1BQTFCLEVBQWtDQyxRQUFRSyxRQUExQyxFQUFvREwsUUFBUWEsYUFBNUQsQ0FBbEI7QUFDQSxNQUFJQyxnQkFBZ0JILFlBQVlJLGFBQVosQ0FBMEJDLE1BQTFCLENBQWlDQyxPQUFPLENBQUNmLFFBQVFnQixHQUFSLENBQVlELElBQUlFLGVBQUosQ0FBb0JDLEdBQXBCLEVBQVosQ0FBekMsQ0FBcEI7QUFDQSxTQUFPLG9CQUFTLFFBQVQsRUFBbUI7QUFDeEJDLGdCQUFZLHNCQURZO0FBRXhCQyxXQUFPUixjQUFjUyxNQUFkLENBQXFCWixZQUFZYSxJQUFqQyxFQUF1Q0QsTUFBdkMsQ0FBOENaLFlBQVljLGFBQVosQ0FBMEJDLFNBQTFCLENBQW9DLG9CQUFTLGdCQUFULEVBQTJCLEVBQTNCLENBQXBDLENBQTlDO0FBRmlCLEdBQW5CLENBQVA7QUFJRDs7QUFwQ0Q7O0FBc0NPLFNBQVM3QixLQUFULENBQWVFLE1BQWYsRUFBK0JDLE9BQS9CLEVBQTJGO0FBQUEsTUFBckMyQixjQUFxQyx1RUFBWCxJQUFXOztBQUNoRyxTQUFPLDRCQUFPLDJCQUFpQixFQUFDQyxPQUFPLENBQVIsRUFBakIsQ0FBUCxFQUFxQ2hDLE9BQU9HLE1BQVAsRUFBZUMsT0FBZixFQUF3QjZCLEdBQXhCLENBQTRCRixjQUE1QixDQUFyQyxDQUFQO0FBQ0Q7O0FBRU0sU0FBUzdCLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlFO0FBQUEsTUFBeENDLE9BQXdDLHVFQUFoQixFQUFnQjs7QUFDOUUsTUFBSThCLE1BQU1qQyxNQUFNRSxNQUFOLEVBQWNDLE9BQWQsRUFBdUJBLFFBQVEyQixjQUEvQixDQUFWO0FBQ0EsTUFBSUUsTUFBTSw0QkFBUUMsR0FBUixFQUFhLG9DQUFiLENBQVY7QUFDQSxTQUFPOUIsUUFBUU0sU0FBUixJQUFzQixDQUFDTixRQUFRK0IsT0FBL0IsR0FBMEMvQixRQUFRTSxTQUFSLENBQWtCdUIsR0FBbEIsRUFBdUI7QUFDdEVHLGFBQVMsSUFENkQ7QUFFdEUzQixjQUFVTCxRQUFRSztBQUZvRCxHQUF2QixDQUExQyxHQUdGLEVBQUVHLE1BQU1xQixHQUFSLEVBSEw7QUFJRCIsImZpbGUiOiJzd2VldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5pbXBvcnQgeyBMaXN0IH0gZnJvbSBcImltbXV0YWJsZVwiO1xuaW1wb3J0IHJlZHVjZSBmcm9tIFwic2hpZnQtcmVkdWNlclwiO1xuaW1wb3J0IFBhcnNlUmVkdWNlciBmcm9tIFwiLi9wYXJzZS1yZWR1Y2VyXCI7XG5pbXBvcnQgY29kZWdlbiwgeyBGb3JtYXR0ZWRDb2RlR2VuIH0gZnJvbSBcInNoaWZ0LWNvZGVnZW5cIjtcblxuaW1wb3J0IEJpbmRpbmdNYXAgZnJvbSBcIi4vYmluZGluZy1tYXAuanNcIjtcblxuaW1wb3J0IFRlcm0gZnJvbSBcIi4vdGVybXNcIjtcbmltcG9ydCB7IE1vZHVsZXMgfSBmcm9tICcuL21vZHVsZXMnO1xuXG4vLyBub3QgYXZhaWxhYmxlIGluIGJyb3dzZXJcblxuaW1wb3J0IHsgdHJhbnNmb3JtIGFzIGJhYmVsVHJhbnNmb3JtIH0gZnJvbSBcImJhYmVsLXN0YW5kYWxvbmVcIjtcbmltcG9ydCBub2RlUmVzb2x2ZXIgZnJvbSBcIi4vbm9kZS1tb2R1bGUtcmVzb2x2ZXJcIjtcbmltcG9ydCBub2RlTG9hZGVyIGZyb20gXCIuL25vZGUtbW9kdWxlLWxvYWRlclwiO1xuXG50eXBlIENvZGVPdXRwdXQgPSB7XG4gIGNvZGU6IHN0cmluZ1xufVxuXG50eXBlIFN3ZWV0T3B0aW9ucyA9IHtcbiAgaW5jbHVkZUltcG9ydHM/OiBib29sZWFuO1xuICBjd2Q/OiBzdHJpbmc7XG4gIGVuZm9yY2VQcmFnbWE/OiBib29sZWFuO1xuICBmaWxlbmFtZT86IHN0cmluZztcbiAgdHJhbnNmb3JtPzogKHM6IHN0cmluZykgPT4geyBjb2RlOiBzdHJpbmcgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZChzb3VyY2U6IHN0cmluZywgb3B0aW9uczogU3dlZXRPcHRpb25zID0ge30pOiBhbnkge1xuICBsZXQgYmluZGluZ3MgPSBuZXcgQmluZGluZ01hcCgpO1xuICBsZXQgbW9kdWxlcyA9IG5ldyBNb2R1bGVzKHtcbiAgICBiaW5kaW5ncyxcbiAgICBjd2Q6IG9wdGlvbnMuY3dkIHx8IHByb2Nlc3MuY3dkKCksXG4gICAgZmlsZW5hbWU6IG9wdGlvbnMuZmlsZW5hbWUsXG4gICAgdHJhbnNmb3JtOiBvcHRpb25zLnRyYW5zZm9ybSB8fCBiYWJlbFRyYW5zZm9ybSB8fCBmdW5jdGlvbihjKSB7XG4gICAgICByZXR1cm4ge2NvZGU6IGN9O1xuICAgIH0sXG4gICAgbW9kdWxlUmVzb2x2ZXI6IG9wdGlvbnMubW9kdWxlUmVzb2x2ZXIgfHwgbm9kZVJlc29sdmVyLFxuICAgIG1vZHVsZUxvYWRlcjogb3B0aW9ucy5tb2R1bGVMb2FkZXIgfHwgbm9kZUxvYWRlclxuICB9KTtcbiAgbGV0IGNvbXBpbGVkTW9kID0gbW9kdWxlcy5jb21waWxlRW50cnlwb2ludChzb3VyY2UsIG9wdGlvbnMuZmlsZW5hbWUsIG9wdGlvbnMuZW5mb3JjZVByYWdtYSk7XG4gIGxldCBuYXRpdmVJbXBvcnRzID0gY29tcGlsZWRNb2QuaW1wb3J0RW50cmllcy5maWx0ZXIoaW1wID0+ICFtb2R1bGVzLmhhcyhpbXAubW9kdWxlU3BlY2lmaWVyLnZhbCgpKSk7XG4gIHJldHVybiBuZXcgVGVybShcIk1vZHVsZVwiLCB7XG4gICAgZGlyZWN0aXZlczogTGlzdCgpLFxuICAgIGl0ZW1zOiBuYXRpdmVJbXBvcnRzLmNvbmNhdChjb21waWxlZE1vZC5ib2R5KS5jb25jYXQoY29tcGlsZWRNb2QuZXhwb3J0RW50cmllcy5pbnRlcnBvc2UobmV3IFRlcm0oJ0VtcHR5U3RhdGVtZW50Jywge30pKSlcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShzb3VyY2U6IHN0cmluZywgb3B0aW9uczogU3dlZXRPcHRpb25zLCBpbmNsdWRlSW1wb3J0czogYm9vbGVhbiA9IHRydWUpOiBhbnkge1xuICByZXR1cm4gcmVkdWNlKG5ldyBQYXJzZVJlZHVjZXIoe3BoYXNlOiAwfSksIGV4cGFuZChzb3VyY2UsIG9wdGlvbnMpLmdlbihpbmNsdWRlSW1wb3J0cykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGlsZShzb3VyY2U6IHN0cmluZywgb3B0aW9uczogU3dlZXRPcHRpb25zID0ge30pOiBDb2RlT3V0cHV0IHtcbiAgbGV0IGFzdCA9IHBhcnNlKHNvdXJjZSwgb3B0aW9ucywgb3B0aW9ucy5pbmNsdWRlSW1wb3J0cyk7XG4gIGxldCBnZW4gPSBjb2RlZ2VuKGFzdCwgbmV3IEZvcm1hdHRlZENvZGVHZW4oKSk7XG4gIHJldHVybiBvcHRpb25zLnRyYW5zZm9ybSAmJiAoIW9wdGlvbnMubm9CYWJlbCkgPyBvcHRpb25zLnRyYW5zZm9ybShnZW4sIHtcbiAgICBiYWJlbHJjOiB0cnVlLFxuICAgIGZpbGVuYW1lOiBvcHRpb25zLmZpbGVuYW1lXG4gIH0pIDogeyBjb2RlOiBnZW4gfTtcbn1cbiJdfQ==