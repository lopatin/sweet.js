"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isImportDeclaration = exports.isCompiletimeStatement = exports.isCompiletimeDeclaration = exports.isSyntaxDeclarationStatement = exports.isExportSyntax = exports.isParenthesizedExpression = exports.isFunctionWithName = exports.isFunctionTerm = exports.isSyntaxrecDeclaration = exports.isSyntaxDeclaration = exports.isEOF = exports.isVariableDeclarator = exports.isVariableDeclaration = exports.isSyntaxTemplate = exports.isTemplateElement = exports.isSwitchDefault = exports.isSwitchCase = exports.isSuper = exports.isSpreadElement = exports.isScript = exports.isFunctionDeclaration = exports.isFunctionBody = exports.isFormalParameters = exports.isDirective = exports.isCatchClause = exports.isBlock = exports.isPragma = exports.isWithStatement = exports.isWhileStatement = exports.isVariableDeclarationStatement = exports.isTryFinallyStatement = exports.isTryCatchStatement = exports.isThrowStatement = exports.isSwitchStatementWithDefault = exports.isSwitchStatement = exports.isReturnStatement = exports.isLabeledStatement = exports.isIfStatement = exports.isForStatement = exports.isForOfStatement = exports.isForInStatement = exports.isExpressionStatement = exports.isEmptyStatement = exports.isDoWhileStatement = exports.isDebuggerStatement = exports.isCompoundAssignmentExpression = exports.isContinueStatement = exports.isBreakStatement = exports.isBlockStatement = exports.isYieldGeneratorExpression = exports.isYieldExpression = exports.isUpdateExpression = exports.isThisExpression = exports.isTemplateExpression = exports.isStaticMemberExpression = exports.isUnaryExpression = exports.isObjectExpression = exports.isNewTargetExpression = exports.isNewExpression = exports.isIdentifierExpression = exports.isFunctionExpression = exports.isConditionalExpression = exports.isComputedMemberExpression = exports.isComputedAssignmentExpression = exports.isCallExpression = exports.isBinaryExpression = exports.isAssignmentExpression = exports.isArrowExpression = exports.isArrayExpression = exports.isLiteralStringExpression = exports.isLiteralRegExpExpression = exports.isLiteralNumericExpression = exports.isLiteralNullExpression = exports.isLiteralInfinityExpression = exports.isLiteralBooleanExpression = exports.isStaticPropertyName = exports.isComputedPropertyName = exports.isShorthandProperty = exports.isDataProperty = exports.isSetter = exports.isGetter = exports.isMethod = exports.isExportSpecifier = exports.isExportDefault = exports.isExport = exports.isExportFrom = exports.isExportAllFrom = exports.isImportSpecifier = exports.isImportNamespace = exports.isImport = exports.isModule = exports.isClassElement = exports.isClassDeclaration = exports.isClassExpression = exports.isBindingPropertyProperty = exports.isBindingPropertyIdentifier = exports.isObjectBinding = exports.isArrayBinding = exports.isBindingIdentifier = exports.isBindingWithDefault = undefined;

var _immutable = require("immutable");

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

var _sweetSpec = require("sweet-spec");

var _sweetSpec2 = _interopRequireDefault(_sweetSpec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const attrName = a => a.attrName;

class Term {

  constructor(type, props) {
    let spec = _sweetSpec2.default.getDescendant(type);
    if (spec == null) {
      throw new Error(`Unknown term: ${ type }`);
    }
    this.type = type;
    this.loc = null;
    this.spec = spec;
    let propKeys = Object.keys(props);
    let fieldNames = spec.getAttributes().map(attrName);
    let diff = R.symmetricDifference(propKeys, fieldNames);
    if (diff.length !== 0) {
      throw new Error(`Unexpected properties for term ${ type }: ${ diff }`);
    }
    Object.assign(this, props);
  }

  extend(props) {
    let specAttrNames = this.spec.getAttributes().map(attrName);
    let newProps = R.pick(specAttrNames, this);

    let invalidAttrs = R.difference(Object.keys(props), specAttrNames);
    if (invalidAttrs.length > 0) {
      throw new Error(`Unexpected properties for term ${ this.type }: ${ invalidAttrs }`);
    }

    return new Term(this.type, Object.assign(newProps, props));
  }

  // TODO: remove
  gen() {
    let includeImports = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    let next = {};
    for (let field of this.spec.getAttributes()) {
      if (this[field.attrName] == null) {
        next[field.attrName] = null;
      } else if (this[field.attrName] instanceof Term) {
        next[field.attrName] = this[field.attrName].gen(includeImports);
      } else if (_immutable.List.isList(this[field.attrName])) {
        let pred = includeImports ? R.complement(isCompiletimeStatement) : R.both(R.complement(isImportDeclaration), R.complement(isCompiletimeStatement));
        next[field.attrName] = this[field.attrName].filter(pred).map(term => term instanceof Term ? term.gen(includeImports) : term);
      } else {
        next[field.attrName] = this[field.attrName];
      }
    }
    return new Term(this.type, next);
  }

  // TODO: remove
  visit(f) {
    let next = {};
    for (let field of _sweetSpec2.default.getDescendant(this.type).getAttributes()) {
      if (this[field.attrName] == null) {
        next[field.attrName] = null;
      } else if (_immutable.List.isList(this[field.attrName])) {
        next[field.attrName] = this[field.attrName].map(field => field != null ? f(field) : null);
      } else {
        next[field.attrName] = f(this[field.attrName]);
      }
    }
    return this.extend(next);
  }

  // TODO: remove
  addScope(scope, bindings, phase, options) {
    return this.visit(term => {
      if (typeof term.addScope === 'function') {
        return term.addScope(scope, bindings, phase, options);
      }
      return term;
    });
  }

  // TODO: remove
  removeScope(scope, phase) {
    return this.visit(term => {
      if (typeof term.removeScope === 'function') {
        return term.removeScope(scope, phase);
      }
      return term;
    });
  }

  // TODO: this is very wrong
  lineNumber() {
    for (let field of _sweetSpec2.default.getDescendant(this.type).getAttributes()) {
      if (typeof this[field.attrName] && this[field.attrName].lineNumber === 'function') {
        return this[field.attrName].lineNumber();
      }
    }
  }

  setLineNumber(line) {
    let next = {};
    for (let field of _sweetSpec2.default.getDescendant(this.type).getAttributes()) {
      if (this[field.attrName] == null) {
        next[field.attrName] = null;
      } else if (typeof this[field.attrName].setLineNumber === 'function') {
        next[field.attrName] = this[field.attrName].setLineNumber(line);
      } else if (_immutable.List.isList(this[field.attrName])) {
        next[field.attrName] = this[field.attrName].map(f => f.setLineNumber(line));
      } else {
        next[field.attrName] = this[field.attrName];
      }
    }
    return new Term(this.type, next);
  }
}

exports.default = Term; // bindings

const isBindingWithDefault = exports.isBindingWithDefault = R.whereEq({ type: "BindingWithDefault" });
const isBindingIdentifier = exports.isBindingIdentifier = R.whereEq({ type: "BindingIdentifier" });
const isArrayBinding = exports.isArrayBinding = R.whereEq({ type: "ArrayBinding" });
const isObjectBinding = exports.isObjectBinding = R.whereEq({ type: "ObjectBinding" });
const isBindingPropertyIdentifier = exports.isBindingPropertyIdentifier = R.whereEq({ type: "BindingPropertyIdentifier" });
const isBindingPropertyProperty = exports.isBindingPropertyProperty = R.whereEq({ type: "BindingPropertyIdentifier" });

// class
const isClassExpression = exports.isClassExpression = R.whereEq({ type: "ClassExpression" });
const isClassDeclaration = exports.isClassDeclaration = R.whereEq({ type: "ClassDeclaration" });
const isClassElement = exports.isClassElement = R.whereEq({ type: "ClassElement" });

// modules
const isModule = exports.isModule = R.whereEq({ type: "Module" });
const isImport = exports.isImport = R.whereEq({ type: "Import" });
const isImportNamespace = exports.isImportNamespace = R.whereEq({ type: "ImportNamespace" });
const isImportSpecifier = exports.isImportSpecifier = R.whereEq({ type: "ImportSpecifier" });
const isExportAllFrom = exports.isExportAllFrom = R.whereEq({ type: "ExportAllFrom" });
const isExportFrom = exports.isExportFrom = R.whereEq({ type: "ExportFrom" });
const isExport = exports.isExport = R.whereEq({ type: "Export" });
const isExportDefault = exports.isExportDefault = R.whereEq({ type: "ExportDefault" });
const isExportSpecifier = exports.isExportSpecifier = R.whereEq({ type: "ExportSpecifier" });

// property definition
const isMethod = exports.isMethod = R.whereEq({ type: "Method" });
const isGetter = exports.isGetter = R.whereEq({ type: "Getter" });
const isSetter = exports.isSetter = R.whereEq({ type: "Setter" });
const isDataProperty = exports.isDataProperty = R.whereEq({ type: "DataProperty" });
const isShorthandProperty = exports.isShorthandProperty = R.whereEq({ type: "ShorthandProperty" });
const isComputedPropertyName = exports.isComputedPropertyName = R.whereEq({ type: "ComputedPropertyName" });
const isStaticPropertyName = exports.isStaticPropertyName = R.whereEq({ type: "StaticPropertyName" });

// literals
const isLiteralBooleanExpression = exports.isLiteralBooleanExpression = R.whereEq({ type: "LiteralBooleanExpression" });
const isLiteralInfinityExpression = exports.isLiteralInfinityExpression = R.whereEq({ type: "LiteralInfinityExpression" });
const isLiteralNullExpression = exports.isLiteralNullExpression = R.whereEq({ type: "LiteralNullExpression" });
const isLiteralNumericExpression = exports.isLiteralNumericExpression = R.whereEq({ type: "LiteralNumericExpression" });
const isLiteralRegExpExpression = exports.isLiteralRegExpExpression = R.whereEq({ type: "LiteralRegExpExpression" });
const isLiteralStringExpression = exports.isLiteralStringExpression = R.whereEq({ type: "LiteralStringExpression" });

// expressions
const isArrayExpression = exports.isArrayExpression = R.whereEq({ type: "ArrayExpression" });
const isArrowExpression = exports.isArrowExpression = R.whereEq({ type: "ArrowExpression" });
const isAssignmentExpression = exports.isAssignmentExpression = R.whereEq({ type: "AssignmentExpression" });
const isBinaryExpression = exports.isBinaryExpression = R.whereEq({ type: "BinaryExpression" });
const isCallExpression = exports.isCallExpression = R.whereEq({ type: "CallExpression" });
const isComputedAssignmentExpression = exports.isComputedAssignmentExpression = R.whereEq({ type: "ComputedAssignmentExpression" });
const isComputedMemberExpression = exports.isComputedMemberExpression = R.whereEq({ type: "ComputedMemberExpression" });
const isConditionalExpression = exports.isConditionalExpression = R.whereEq({ type: "ConditionalExpression" });
const isFunctionExpression = exports.isFunctionExpression = R.whereEq({ type: "FunctionExpression" });
const isIdentifierExpression = exports.isIdentifierExpression = R.whereEq({ type: "IdentifierExpression" });
const isNewExpression = exports.isNewExpression = R.whereEq({ type: "NewExpression" });
const isNewTargetExpression = exports.isNewTargetExpression = R.whereEq({ type: "NewTargetExpression" });
const isObjectExpression = exports.isObjectExpression = R.whereEq({ type: "ObjectExpression" });
const isUnaryExpression = exports.isUnaryExpression = R.whereEq({ type: "UnaryExpression" });
const isStaticMemberExpression = exports.isStaticMemberExpression = R.whereEq({ type: "StaticMemberExpression" });
const isTemplateExpression = exports.isTemplateExpression = R.whereEq({ type: "TemplateExpression" });
const isThisExpression = exports.isThisExpression = R.whereEq({ type: "ThisExpression" });
const isUpdateExpression = exports.isUpdateExpression = R.whereEq({ type: "UpdateExpression" });
const isYieldExpression = exports.isYieldExpression = R.whereEq({ type: "YieldExpression" });
const isYieldGeneratorExpression = exports.isYieldGeneratorExpression = R.whereEq({ type: "YieldGeneratorExpression" });

// statements
const isBlockStatement = exports.isBlockStatement = R.whereEq({ type: "BlockStatement" });
const isBreakStatement = exports.isBreakStatement = R.whereEq({ type: "BreakStatement" });
const isContinueStatement = exports.isContinueStatement = R.whereEq({ type: "ContinueStatement" });
const isCompoundAssignmentExpression = exports.isCompoundAssignmentExpression = R.whereEq({ type: "CompoundAssignmentExpression" });
const isDebuggerStatement = exports.isDebuggerStatement = R.whereEq({ type: "DebuggerStatement" });
const isDoWhileStatement = exports.isDoWhileStatement = R.whereEq({ type: "DoWhileStatement" });
const isEmptyStatement = exports.isEmptyStatement = R.whereEq({ type: "EmptyStatement" });
const isExpressionStatement = exports.isExpressionStatement = R.whereEq({ type: "ExpressionStatement" });
const isForInStatement = exports.isForInStatement = R.whereEq({ type: "ForInStatement" });
const isForOfStatement = exports.isForOfStatement = R.whereEq({ type: "ForOfStatement" });
const isForStatement = exports.isForStatement = R.whereEq({ type: "ForStatement" });
const isIfStatement = exports.isIfStatement = R.whereEq({ type: "IfStatement" });
const isLabeledStatement = exports.isLabeledStatement = R.whereEq({ type: "LabeledStatement" });
const isReturnStatement = exports.isReturnStatement = R.whereEq({ type: "ReturnStatement" });
const isSwitchStatement = exports.isSwitchStatement = R.whereEq({ type: "SwitchStatement" });
const isSwitchStatementWithDefault = exports.isSwitchStatementWithDefault = R.whereEq({ type: "SwitchStatementWithDefault" });
const isThrowStatement = exports.isThrowStatement = R.whereEq({ type: "ThrowStatement" });
const isTryCatchStatement = exports.isTryCatchStatement = R.whereEq({ type: "TryCatchStatement" });
const isTryFinallyStatement = exports.isTryFinallyStatement = R.whereEq({ type: "TryFinallyStatement" });
const isVariableDeclarationStatement = exports.isVariableDeclarationStatement = R.whereEq({ type: "VariableDeclarationStatement" });
const isWhileStatement = exports.isWhileStatement = R.whereEq({ type: "WhileStatement" });
const isWithStatement = exports.isWithStatement = R.whereEq({ type: "WithStatement" });

// other
const isPragma = exports.isPragma = R.whereEq({ type: 'Pragma' });
const isBlock = exports.isBlock = R.whereEq({ type: "Block" });
const isCatchClause = exports.isCatchClause = R.whereEq({ type: "CatchClause" });
const isDirective = exports.isDirective = R.whereEq({ type: "Directive" });
const isFormalParameters = exports.isFormalParameters = R.whereEq({ type: "FormalParameters" });
const isFunctionBody = exports.isFunctionBody = R.whereEq({ type: "FunctionBody" });
const isFunctionDeclaration = exports.isFunctionDeclaration = R.whereEq({ type: "FunctionDeclaration" });
const isScript = exports.isScript = R.whereEq({ type: "Script" });
const isSpreadElement = exports.isSpreadElement = R.whereEq({ type: "SpreadElement" });
const isSuper = exports.isSuper = R.whereEq({ type: "Super" });
const isSwitchCase = exports.isSwitchCase = R.whereEq({ type: "SwitchCase" });
const isSwitchDefault = exports.isSwitchDefault = R.whereEq({ type: "SwitchDefault" });
const isTemplateElement = exports.isTemplateElement = R.whereEq({ type: "TemplateElement" });
const isSyntaxTemplate = exports.isSyntaxTemplate = R.whereEq({ type: "SyntaxTemplate" });
const isVariableDeclaration = exports.isVariableDeclaration = R.whereEq({ type: "VariableDeclaration" });
const isVariableDeclarator = exports.isVariableDeclarator = R.whereEq({ type: "VariableDeclarator" });
const isEOF = exports.isEOF = R.whereEq({ type: 'EOF' });
const isSyntaxDeclaration = exports.isSyntaxDeclaration = R.both(isVariableDeclaration, R.whereEq({ kind: 'syntax' }));
const isSyntaxrecDeclaration = exports.isSyntaxrecDeclaration = R.both(isVariableDeclaration, R.whereEq({ kind: 'syntaxrec' }));
const isFunctionTerm = exports.isFunctionTerm = R.either(isFunctionDeclaration, isFunctionExpression);
const isFunctionWithName = exports.isFunctionWithName = R.and(isFunctionTerm, R.complement(R.where({ name: R.isNil })));
const isParenthesizedExpression = exports.isParenthesizedExpression = R.whereEq({ type: 'ParenthesizedExpression' });
const isExportSyntax = exports.isExportSyntax = R.both(isExport, exp => R.or(isSyntaxDeclaration(exp.declaration), isSyntaxrecDeclaration(exp.declaration)));
const isSyntaxDeclarationStatement = exports.isSyntaxDeclarationStatement = R.both(isVariableDeclarationStatement, decl => isCompiletimeDeclaration(decl.declaration));

const isCompiletimeDeclaration = exports.isCompiletimeDeclaration = R.either(isSyntaxDeclaration, isSyntaxrecDeclaration);
const isCompiletimeStatement = exports.isCompiletimeStatement = term => {
  return term instanceof Term && isVariableDeclarationStatement(term) && isCompiletimeDeclaration(term.declaration);
};
const isImportDeclaration = exports.isImportDeclaration = R.either(isImport, isImportNamespace);
//# sourceMappingURL=data:application/json;base64,