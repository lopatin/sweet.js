"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _terms = require("./terms");

var _terms2 = _interopRequireDefault(_terms);

var _shiftReducer = require("shift-reducer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ParseReducer extends _shiftReducer.CloneReducer {
  constructor(context) {
    super();
    this.context = context;
  }
  reduceModule(node, state) {
    return new _terms2.default("Module", {
      directives: state.directives.toArray(),
      items: state.items.toArray()
    });
  }

  reduceImport(node, state) {
    let moduleSpecifier = state.moduleSpecifier ? state.moduleSpecifier.val() : null;
    return new _terms2.default('Import', {
      defaultBinding: state.defaultBinding,
      namedImports: state.namedImports.toArray(),
      moduleSpecifier: moduleSpecifier,
      forSyntax: node.forSyntax
    });
  }

  reduceImportNamespace(node, state) {
    let moduleSpecifier = state.moduleSpecifier ? state.moduleSpecifier.val() : null;
    return new _terms2.default('ImportNamespace', {
      defaultBinding: state.defaultBinding,
      namespaceBinding: state.namespaceBinding,
      moduleSpecifier: moduleSpecifier,
      forSyntax: node.forSyntax
    });
  }

  reduceExport(node, state) {
    return new _terms2.default('Export', {
      declaration: state.declaration
    });
  }

  reduceExportAllFrom(node, state) {
    let moduleSpecifier = state.moduleSpecifier ? state.moduleSpecifier.val() : null;
    return new _terms2.default('ExportAllFrom', { moduleSpecifier: moduleSpecifier });
  }

  reduceExportFrom(node, state) {
    let moduleSpecifier = state.moduleSpecifier ? state.moduleSpecifier.val() : null;
    return new _terms2.default('ExportFrom', {
      moduleSpecifier: moduleSpecifier,
      namedExports: state.namedExports.toArray()
    });
  }

  reduceExportSpecifier(node, state) {
    let name = state.name,
        exportedName = state.exportedName;
    if (name == null) {
      name = exportedName.resolve(this.context.phase);
      exportedName = exportedName.val();
    } else {
      name = name.resolve(this.context.phase);
      exportedName = exportedName.val();
    }
    return new _terms2.default('ExportSpecifier', {
      name: name, exportedName: exportedName
    });
  }

  reduceImportSpecifier(node, state) {
    let name = state.name ? state.name.resolve(this.context.phase) : null;
    return new _terms2.default('ImportSpecifier', {
      name: name,
      binding: state.binding
    });
  }

  reduceIdentifierExpression(node) {
    return new _terms2.default("IdentifierExpression", {
      name: node.name.resolve(this.context.phase)
    });
  }

  reduceLiteralNumericExpression(node) {
    return new _terms2.default("LiteralNumericExpression", {
      value: node.value.val()
    });
  }

  reduceLiteralBooleanExpression(node) {
    return new _terms2.default("LiteralBooleanExpression", {
      value: node.value.val() === 'true'
    });
  }

  reduceLiteralStringExpression(node) {
    return new _terms2.default("LiteralStringExpression", {
      value: node.value.token.str
    });
  }

  reduceCallExpression(node, state) {
    return new _terms2.default("CallExpression", {
      callee: state.callee,
      arguments: state.arguments.toArray()
    });
  }

  reduceFunctionBody(node, state) {
    return new _terms2.default("FunctionBody", {
      directives: state.directives.toArray(),
      statements: state.statements.toArray()
    });
  }

  reduceFormalParameters(node, state) {
    return new _terms2.default("FormalParameters", {
      items: state.items.toArray(),
      rest: state.rest
    });
  }

  reduceBindingIdentifier(node) {
    return new _terms2.default("BindingIdentifier", {
      name: node.name.resolve(this.context.phase)
    });
  }

  reduceBinaryExpression(node, state) {
    return new _terms2.default("BinaryExpression", {
      left: state.left,
      operator: node.operator.val(),
      right: state.right
    });
  }

  reduceObjectExpression(node, state) {
    return new _terms2.default("ObjectExpression", {
      properties: state.properties.toArray()
    });
  }

  reduceVariableDeclaration(node, state) {
    return new _terms2.default("VariableDeclaration", {
      kind: state.kind,
      declarators: state.declarators.toArray()
    });
  }

  reduceStaticPropertyName(node) {
    return new _terms2.default("StaticPropertyName", {
      value: node.value.val().toString()
    });
  }

  reduceArrayExpression(node, state) {
    return new _terms2.default("ArrayExpression", {
      elements: state.elements.toArray()
    });
  }

  reduceStaticMemberExpression(node, state) {
    return new _terms2.default("StaticMemberExpression", {
      object: state.object,
      property: state.property.val()
    });
  }

}
exports.default = ParseReducer;
//# sourceMappingURL=data:application/json;base64,