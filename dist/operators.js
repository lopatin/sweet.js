'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.operatorLt = operatorLt;
exports.getOperatorPrec = getOperatorPrec;
exports.getOperatorAssoc = getOperatorAssoc;
exports.isUnaryOperator = isUnaryOperator;
exports.isOperator = isOperator;
const unaryOperators = {
  '+': true,
  '-': true,
  '!': true,
  '~': true,
  '++': true,
  '--': true,
  'typeof': true,
  'void': true,
  'delete': true
};
const binaryOperatorPrecedence = {
  "*": 13,
  "/": 13,
  "%": 13,
  "+": 12,
  "-": 12,
  ">>": 11,
  "<<": 11,
  ">>>": 11,
  "<": 10,
  "<=": 10,
  ">": 10,
  ">=": 10,
  "in": 10,
  "instanceof": 10,
  "==": 9,
  "!=": 9,
  "===": 9,
  "!==": 9,
  "&": 8,
  "^": 7,
  "|": 6,
  "&&": 5,
  "||": 4
};

var operatorAssoc = {
  "*": "left",
  "/": "left",
  "%": "left",
  "+": "left",
  "-": "left",
  ">>": "left",
  "<<": "left",
  ">>>": "left",
  "<": "left",
  "<=": "left",
  ">": "left",
  ">=": "left",
  "in": "left",
  "instanceof": "left",
  "==": "left",
  "!=": "left",
  "===": "left",
  "!==": "left",
  "&": "left",
  "^": "left",
  "|": "left",
  "&&": "left",
  "||": "left"
};

function operatorLt(left, right, assoc) {
  if (assoc === "left") {
    return left < right;
  } else {
    return left <= right;
  }
}

function getOperatorPrec(op) {
  return binaryOperatorPrecedence[op];
}
function getOperatorAssoc(op) {
  return operatorAssoc[op];
}

function isUnaryOperator(op) {
  return (op.match("punctuator") || op.match("identifier") || op.match("keyword")) && unaryOperators.hasOwnProperty(op.val());
}

function isOperator(op) {
  if (op.match("punctuator") || op.match("identifier") || op.match("keyword")) {
    return binaryOperatorPrecedence.hasOwnProperty(op) || unaryOperators.hasOwnProperty(op.val());
  }
  return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vcGVyYXRvcnMuanMiXSwibmFtZXMiOlsib3BlcmF0b3JMdCIsImdldE9wZXJhdG9yUHJlYyIsImdldE9wZXJhdG9yQXNzb2MiLCJpc1VuYXJ5T3BlcmF0b3IiLCJpc09wZXJhdG9yIiwidW5hcnlPcGVyYXRvcnMiLCJiaW5hcnlPcGVyYXRvclByZWNlZGVuY2UiLCJvcGVyYXRvckFzc29jIiwibGVmdCIsInJpZ2h0IiwiYXNzb2MiLCJvcCIsIm1hdGNoIiwiaGFzT3duUHJvcGVydHkiLCJ2YWwiXSwibWFwcGluZ3MiOiI7Ozs7O1FBK0RnQkEsVSxHQUFBQSxVO1FBUUFDLGUsR0FBQUEsZTtRQUdBQyxnQixHQUFBQSxnQjtRQUlBQyxlLEdBQUFBLGU7UUFLQUMsVSxHQUFBQSxVO0FBbkZoQixNQUFNQyxpQkFBaUI7QUFDckIsT0FBSyxJQURnQjtBQUVyQixPQUFLLElBRmdCO0FBR3JCLE9BQUssSUFIZ0I7QUFJckIsT0FBSyxJQUpnQjtBQUtyQixRQUFNLElBTGU7QUFNckIsUUFBTSxJQU5lO0FBT3JCLFlBQVUsSUFQVztBQVFyQixVQUFRLElBUmE7QUFTckIsWUFBVTtBQVRXLENBQXZCO0FBV0EsTUFBTUMsMkJBQTJCO0FBQy9CLE9BQUssRUFEMEI7QUFFL0IsT0FBSyxFQUYwQjtBQUcvQixPQUFLLEVBSDBCO0FBSS9CLE9BQUssRUFKMEI7QUFLL0IsT0FBSyxFQUwwQjtBQU0vQixRQUFNLEVBTnlCO0FBTy9CLFFBQU0sRUFQeUI7QUFRL0IsU0FBTyxFQVJ3QjtBQVMvQixPQUFLLEVBVDBCO0FBVS9CLFFBQU0sRUFWeUI7QUFXL0IsT0FBSyxFQVgwQjtBQVkvQixRQUFNLEVBWnlCO0FBYS9CLFFBQU0sRUFieUI7QUFjL0IsZ0JBQWMsRUFkaUI7QUFlL0IsUUFBTSxDQWZ5QjtBQWdCL0IsUUFBTSxDQWhCeUI7QUFpQi9CLFNBQU8sQ0FqQndCO0FBa0IvQixTQUFPLENBbEJ3QjtBQW1CL0IsT0FBSyxDQW5CMEI7QUFvQi9CLE9BQUssQ0FwQjBCO0FBcUIvQixPQUFLLENBckIwQjtBQXNCL0IsUUFBTSxDQXRCeUI7QUF1Qi9CLFFBQU07QUF2QnlCLENBQWpDOztBQTBCQSxJQUFJQyxnQkFBZ0I7QUFDbEIsT0FBSyxNQURhO0FBRWxCLE9BQUssTUFGYTtBQUdsQixPQUFLLE1BSGE7QUFJbEIsT0FBSyxNQUphO0FBS2xCLE9BQUssTUFMYTtBQU1sQixRQUFNLE1BTlk7QUFPbEIsUUFBTSxNQVBZO0FBUWxCLFNBQU8sTUFSVztBQVNsQixPQUFLLE1BVGE7QUFVbEIsUUFBTSxNQVZZO0FBV2xCLE9BQUssTUFYYTtBQVlsQixRQUFNLE1BWlk7QUFhbEIsUUFBTSxNQWJZO0FBY2xCLGdCQUFjLE1BZEk7QUFlbEIsUUFBTSxNQWZZO0FBZ0JsQixRQUFNLE1BaEJZO0FBaUJsQixTQUFPLE1BakJXO0FBa0JsQixTQUFPLE1BbEJXO0FBbUJsQixPQUFLLE1BbkJhO0FBb0JsQixPQUFLLE1BcEJhO0FBcUJsQixPQUFLLE1BckJhO0FBc0JsQixRQUFNLE1BdEJZO0FBdUJsQixRQUFNO0FBdkJZLENBQXBCOztBQTBCTyxTQUFTUCxVQUFULENBQW9CUSxJQUFwQixFQUEwQkMsS0FBMUIsRUFBaUNDLEtBQWpDLEVBQXdDO0FBQzdDLE1BQUlBLFVBQVUsTUFBZCxFQUFzQjtBQUNwQixXQUFPRixPQUFPQyxLQUFkO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0QsUUFBUUMsS0FBZjtBQUNEO0FBQ0Y7O0FBRU0sU0FBU1IsZUFBVCxDQUF5QlUsRUFBekIsRUFBNkI7QUFDbEMsU0FBT0wseUJBQXlCSyxFQUF6QixDQUFQO0FBQ0Q7QUFDTSxTQUFTVCxnQkFBVCxDQUEwQlMsRUFBMUIsRUFBOEI7QUFDbkMsU0FBT0osY0FBY0ksRUFBZCxDQUFQO0FBQ0Q7O0FBRU0sU0FBU1IsZUFBVCxDQUF5QlEsRUFBekIsRUFBNkI7QUFDbEMsU0FBTyxDQUFDQSxHQUFHQyxLQUFILENBQVMsWUFBVCxLQUEwQkQsR0FBR0MsS0FBSCxDQUFTLFlBQVQsQ0FBMUIsSUFBb0RELEdBQUdDLEtBQUgsQ0FBUyxTQUFULENBQXJELEtBQ0RQLGVBQWVRLGNBQWYsQ0FBOEJGLEdBQUdHLEdBQUgsRUFBOUIsQ0FETjtBQUVEOztBQUVNLFNBQVNWLFVBQVQsQ0FBb0JPLEVBQXBCLEVBQXdCO0FBQzdCLE1BQUlBLEdBQUdDLEtBQUgsQ0FBUyxZQUFULEtBQTBCRCxHQUFHQyxLQUFILENBQVMsWUFBVCxDQUExQixJQUFvREQsR0FBR0MsS0FBSCxDQUFTLFNBQVQsQ0FBeEQsRUFBNkU7QUFDM0UsV0FBT04seUJBQXlCTyxjQUF6QixDQUF3Q0YsRUFBeEMsS0FBK0NOLGVBQWVRLGNBQWYsQ0FBOEJGLEdBQUdHLEdBQUgsRUFBOUIsQ0FBdEQ7QUFDRDtBQUNELFNBQU8sS0FBUDtBQUNEIiwiZmlsZSI6Im9wZXJhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHVuYXJ5T3BlcmF0b3JzID0ge1xuICAnKyc6IHRydWUsXG4gICctJzogdHJ1ZSxcbiAgJyEnOiB0cnVlLFxuICAnfic6IHRydWUsXG4gICcrKyc6IHRydWUsXG4gICctLSc6IHRydWUsXG4gICd0eXBlb2YnOiB0cnVlLFxuICAndm9pZCc6IHRydWUsXG4gICdkZWxldGUnOiB0cnVlLFxufTtcbmNvbnN0IGJpbmFyeU9wZXJhdG9yUHJlY2VkZW5jZSA9IHtcbiAgXCIqXCI6IDEzLFxuICBcIi9cIjogMTMsXG4gIFwiJVwiOiAxMyxcbiAgXCIrXCI6IDEyLFxuICBcIi1cIjogMTIsXG4gIFwiPj5cIjogMTEsXG4gIFwiPDxcIjogMTEsXG4gIFwiPj4+XCI6IDExLFxuICBcIjxcIjogMTAsXG4gIFwiPD1cIjogMTAsXG4gIFwiPlwiOiAxMCxcbiAgXCI+PVwiOiAxMCxcbiAgXCJpblwiOiAxMCxcbiAgXCJpbnN0YW5jZW9mXCI6IDEwLFxuICBcIj09XCI6IDksXG4gIFwiIT1cIjogOSxcbiAgXCI9PT1cIjogOSxcbiAgXCIhPT1cIjogOSxcbiAgXCImXCI6IDgsXG4gIFwiXlwiOiA3LFxuICBcInxcIjogNixcbiAgXCImJlwiOiA1LFxuICBcInx8XCI6IDQsXG59O1xuXG52YXIgb3BlcmF0b3JBc3NvYyA9IHtcbiAgXCIqXCI6IFwibGVmdFwiLFxuICBcIi9cIjogXCJsZWZ0XCIsXG4gIFwiJVwiOiBcImxlZnRcIixcbiAgXCIrXCI6IFwibGVmdFwiLFxuICBcIi1cIjogXCJsZWZ0XCIsXG4gIFwiPj5cIjogXCJsZWZ0XCIsXG4gIFwiPDxcIjogXCJsZWZ0XCIsXG4gIFwiPj4+XCI6IFwibGVmdFwiLFxuICBcIjxcIjogXCJsZWZ0XCIsXG4gIFwiPD1cIjogXCJsZWZ0XCIsXG4gIFwiPlwiOiBcImxlZnRcIixcbiAgXCI+PVwiOiBcImxlZnRcIixcbiAgXCJpblwiOiBcImxlZnRcIixcbiAgXCJpbnN0YW5jZW9mXCI6IFwibGVmdFwiLFxuICBcIj09XCI6IFwibGVmdFwiLFxuICBcIiE9XCI6IFwibGVmdFwiLFxuICBcIj09PVwiOiBcImxlZnRcIixcbiAgXCIhPT1cIjogXCJsZWZ0XCIsXG4gIFwiJlwiOiBcImxlZnRcIixcbiAgXCJeXCI6IFwibGVmdFwiLFxuICBcInxcIjogXCJsZWZ0XCIsXG4gIFwiJiZcIjogXCJsZWZ0XCIsXG4gIFwifHxcIjogXCJsZWZ0XCIsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0b3JMdChsZWZ0LCByaWdodCwgYXNzb2MpIHtcbiAgaWYgKGFzc29jID09PSBcImxlZnRcIikge1xuICAgIHJldHVybiBsZWZ0IDwgcmlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxlZnQgPD0gcmlnaHQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdG9yUHJlYyhvcCkge1xuICByZXR1cm4gYmluYXJ5T3BlcmF0b3JQcmVjZWRlbmNlW29wXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRvckFzc29jKG9wKSB7XG4gIHJldHVybiBvcGVyYXRvckFzc29jW29wXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5hcnlPcGVyYXRvcihvcCkge1xuICByZXR1cm4gKG9wLm1hdGNoKFwicHVuY3R1YXRvclwiKSB8fCBvcC5tYXRjaChcImlkZW50aWZpZXJcIikgfHwgb3AubWF0Y2goXCJrZXl3b3JkXCIpKSAmJlxuICAgICAgICB1bmFyeU9wZXJhdG9ycy5oYXNPd25Qcm9wZXJ0eShvcC52YWwoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09wZXJhdG9yKG9wKSB7XG4gIGlmIChvcC5tYXRjaChcInB1bmN0dWF0b3JcIikgfHwgb3AubWF0Y2goXCJpZGVudGlmaWVyXCIpIHx8IG9wLm1hdGNoKFwia2V5d29yZFwiKSkge1xuICAgIHJldHVybiBiaW5hcnlPcGVyYXRvclByZWNlZGVuY2UuaGFzT3duUHJvcGVydHkob3ApIHx8IHVuYXJ5T3BlcmF0b3JzLmhhc093blByb3BlcnR5KG9wLnZhbCgpKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iXX0=