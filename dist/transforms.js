"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
class FunctionDeclTransform {}
exports.FunctionDeclTransform = FunctionDeclTransform;
class VariableDeclTransform {}
exports.VariableDeclTransform = VariableDeclTransform;
class NewTransform {}
exports.NewTransform = NewTransform;
class ThrowTransform {}
exports.ThrowTransform = ThrowTransform;
class LetDeclTransform {}
exports.LetDeclTransform = LetDeclTransform;
class ConstDeclTransform {}
exports.ConstDeclTransform = ConstDeclTransform;
class TryTransform {}
exports.TryTransform = TryTransform;
class WhileTransform {}
exports.WhileTransform = WhileTransform;
class IfTransform {}
exports.IfTransform = IfTransform;
class ForTransform {}
exports.ForTransform = ForTransform;
class SwitchTransform {}
exports.SwitchTransform = SwitchTransform;
class BreakTransform {}
exports.BreakTransform = BreakTransform;
class ContinueTransform {}
exports.ContinueTransform = ContinueTransform;
class DoTransform {}
exports.DoTransform = DoTransform;
class WithTransform {}
exports.WithTransform = WithTransform;
class DebuggerTransform {}
exports.DebuggerTransform = DebuggerTransform;
class SyntaxrecDeclTransform {}
exports.SyntaxrecDeclTransform = SyntaxrecDeclTransform;
class SyntaxDeclTransform {}
exports.SyntaxDeclTransform = SyntaxDeclTransform;
class SyntaxQuoteTransform {}
exports.SyntaxQuoteTransform = SyntaxQuoteTransform;
class ReturnStatementTransform {}
exports.ReturnStatementTransform = ReturnStatementTransform;
class VarBindingTransform {
  constructor(id) {
    this.id = id;
  }
}
exports.VarBindingTransform = VarBindingTransform;
class CompiletimeTransform {
  constructor(value) {
    this.value = value;
  }
}
exports.CompiletimeTransform = CompiletimeTransform;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmFuc2Zvcm1zLmpzIl0sIm5hbWVzIjpbIkZ1bmN0aW9uRGVjbFRyYW5zZm9ybSIsIlZhcmlhYmxlRGVjbFRyYW5zZm9ybSIsIk5ld1RyYW5zZm9ybSIsIlRocm93VHJhbnNmb3JtIiwiTGV0RGVjbFRyYW5zZm9ybSIsIkNvbnN0RGVjbFRyYW5zZm9ybSIsIlRyeVRyYW5zZm9ybSIsIldoaWxlVHJhbnNmb3JtIiwiSWZUcmFuc2Zvcm0iLCJGb3JUcmFuc2Zvcm0iLCJTd2l0Y2hUcmFuc2Zvcm0iLCJCcmVha1RyYW5zZm9ybSIsIkNvbnRpbnVlVHJhbnNmb3JtIiwiRG9UcmFuc2Zvcm0iLCJXaXRoVHJhbnNmb3JtIiwiRGVidWdnZXJUcmFuc2Zvcm0iLCJTeW50YXhyZWNEZWNsVHJhbnNmb3JtIiwiU3ludGF4RGVjbFRyYW5zZm9ybSIsIlN5bnRheFF1b3RlVHJhbnNmb3JtIiwiUmV0dXJuU3RhdGVtZW50VHJhbnNmb3JtIiwiVmFyQmluZGluZ1RyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwiaWQiLCJDb21waWxldGltZVRyYW5zZm9ybSIsInZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLHFCQUFOLENBQTRCO1FBQXRCQSxxQixHQUFBQSxxQjtBQUNOLE1BQU1DLHFCQUFOLENBQTRCO1FBQXRCQSxxQixHQUFBQSxxQjtBQUNOLE1BQU1DLFlBQU4sQ0FBbUI7UUFBYkEsWSxHQUFBQSxZO0FBQ04sTUFBTUMsY0FBTixDQUFxQjtRQUFmQSxjLEdBQUFBLGM7QUFDTixNQUFNQyxnQkFBTixDQUF1QjtRQUFqQkEsZ0IsR0FBQUEsZ0I7QUFDTixNQUFNQyxrQkFBTixDQUF5QjtRQUFuQkEsa0IsR0FBQUEsa0I7QUFDTixNQUFNQyxZQUFOLENBQW1CO1FBQWJBLFksR0FBQUEsWTtBQUNOLE1BQU1DLGNBQU4sQ0FBcUI7UUFBZkEsYyxHQUFBQSxjO0FBQ04sTUFBTUMsV0FBTixDQUFrQjtRQUFaQSxXLEdBQUFBLFc7QUFDTixNQUFNQyxZQUFOLENBQW1CO1FBQWJBLFksR0FBQUEsWTtBQUNOLE1BQU1DLGVBQU4sQ0FBc0I7UUFBaEJBLGUsR0FBQUEsZTtBQUNOLE1BQU1DLGNBQU4sQ0FBcUI7UUFBZkEsYyxHQUFBQSxjO0FBQ04sTUFBTUMsaUJBQU4sQ0FBd0I7UUFBbEJBLGlCLEdBQUFBLGlCO0FBQ04sTUFBTUMsV0FBTixDQUFrQjtRQUFaQSxXLEdBQUFBLFc7QUFDTixNQUFNQyxhQUFOLENBQW9CO1FBQWRBLGEsR0FBQUEsYTtBQUNOLE1BQU1DLGlCQUFOLENBQXdCO1FBQWxCQSxpQixHQUFBQSxpQjtBQUNOLE1BQU1DLHNCQUFOLENBQTZCO1FBQXZCQSxzQixHQUFBQSxzQjtBQUNOLE1BQU1DLG1CQUFOLENBQTBCO1FBQXBCQSxtQixHQUFBQSxtQjtBQUNOLE1BQU1DLG9CQUFOLENBQTJCO1FBQXJCQSxvQixHQUFBQSxvQjtBQUNOLE1BQU1DLHdCQUFOLENBQStCO1FBQXpCQSx3QixHQUFBQSx3QjtBQUNOLE1BQU1DLG1CQUFOLENBQTBCO0FBQy9CQyxjQUFZQyxFQUFaLEVBQWdCO0FBQ2QsU0FBS0EsRUFBTCxHQUFVQSxFQUFWO0FBQ0Q7QUFIOEI7UUFBcEJGLG1CLEdBQUFBLG1CO0FBS04sTUFBTUcsb0JBQU4sQ0FBMkI7QUFDaENGLGNBQVlHLEtBQVosRUFBbUI7QUFDakIsU0FBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0Q7QUFIK0I7UUFBckJELG9CLEdBQUFBLG9CIiwiZmlsZSI6InRyYW5zZm9ybXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRnVuY3Rpb25EZWNsVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIFZhcmlhYmxlRGVjbFRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBOZXdUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgVGhyb3dUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgTGV0RGVjbFRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBDb25zdERlY2xUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgVHJ5VHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIFdoaWxlVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIElmVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIEZvclRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBTd2l0Y2hUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgQnJlYWtUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgQ29udGludWVUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgRG9UcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgV2l0aFRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBEZWJ1Z2dlclRyYW5zZm9ybSB7IH1cbmV4cG9ydCBjbGFzcyBTeW50YXhyZWNEZWNsVHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIFN5bnRheERlY2xUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgU3ludGF4UXVvdGVUcmFuc2Zvcm0geyB9XG5leHBvcnQgY2xhc3MgUmV0dXJuU3RhdGVtZW50VHJhbnNmb3JtIHsgfVxuZXhwb3J0IGNsYXNzIFZhckJpbmRpbmdUcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvcihpZCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgfVxufVxuZXhwb3J0IGNsYXNzIENvbXBpbGV0aW1lVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbn1cbiJdfQ==